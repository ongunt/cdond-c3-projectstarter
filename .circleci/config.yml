version: 2.1
orbs: 
  slack: circleci/slack@4.6.0
commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
     # Add parameter her     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure  https://kvdb.io/LeGgihuBux3kmgp2KTPkSn/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
            # Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
              echo "revert migration done"
            fi
      
  
  notify_slack_error:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1     
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            #your code
            cd frontend
            npm install
            npm run build
            
      - notify_slack_error
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
         

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            #your code
            cd backend
            npm install
            npm run build
            
      - notify_slack_error
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
         

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [test-frontend]
      # Your job code here
      - run:
          name: run frontend test
          command: |
            #your code
            cd frontend
            npm install
            npm run test
      - notify_slack_error       
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [test-backend]      
      # Your job code here
      - run:
          name: run backend test
          command: |
            #your code
            cd backend
            npm install
            npm run test
      - notify_slack_error    
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [scan-frontend]         
      # Your job code here
      - run:
          name: run frontend scan
          command: |
            #your code
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            #npm audit fix --audit-level=critical --force
            #npm audit fix
            npm audit fix --audit-level=critical 
      - notify_slack_error
            
  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [scan-backend]         
      # Your job code here
      - run:
          name: run backend scan
          command: |
            #your code
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            #npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical
      - notify_slack_error
  
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            cat .circleci/ansible/inventory.txt
            ls ~/project/.circleci/ansible/
            cat ~/project/.circleci/ansible/inventory.txt
            yum -y install tar gzip jq npm
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"              
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            echo [web] > inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - ./.circleci/ansible/inventory.txt 
      - notify_slack_error
      - destroy-environment 
 

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout

      - add_ssh_keys:
          fingerprints: ["30:09:18:55:20:70:03:f7:93:71:6c:4b:38:52:8f:61"]                          

      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl 
            pip install awscli
      - run:
          name: Run Playbook and Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml --key-file "~/udacity.pem"
      - notify_slack_error
      - destroy-environment
  
  

  run-migrations: 
    docker:
      # Docker image here that supports NodeJS
      - image: python:3.7-alpine3.11
    steps:
      - checkout 
      # Checkout code from git
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install aws dependencies         
          command: |
            apk add --update ansible tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            pwd
            echo > ".env"
            echo ENVIRONMENT=production > .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME= $TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            ls -l
          
            
            npm install
            # npm install oauth-sign@^0.9.0
            ##alttakini commentle
            #npm audit fix 
            npm run build
            npm run migrations:revert
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
              curl --insecure https://kvdb.io/LeGgihuBux3kmgp2KTPkSn/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1' 
            else
              curl --insecure https://kvdb.io/LeGgihuBux3kmgp2KTPkSn/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0' 
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
  # Here's where you will add some code to rollback on failure      
      - notify_slack_error
      - destroy-environment
      
  deploy-frontend:
    docker:
     # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar/gzip utility
          command: |
            yum install -y tar gzip unzip      
      - run:
          name: Install dependencies
          command: |
            apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
      - run:
          name: Get backend url
          workding_directory: ./frontend
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            ls -la
            cat frontend/.env
      - run:
          name: install nodejs
          command: |
            # your code here
            cd frontend
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - run:
          name: build and deploy frontend 
          command: |
            # your code here
            cd frontend           
            
            # npm install oauth-sign@^0.9.0
            npm install -g npm
            npm install oauth2 webpack
            npm run build
            ls -l
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            ls -l
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
      - notify_slack_error
      - destroy-environment
      - revert-migrations

  deploy-backend:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        # Checkout code from git
        # Add ssh keys with fingerprint
        # attach workspace
        - add_ssh_keys:
            fingerprints: ["30:09:18:55:20:70:03:f7:93:71:6c:4b:38:52:8f:61"]

        - attach_workspace:
            at: .
        - run:
            name: Install dependencies
            command: |
              apk add --update ansible curl rsync openssh nodejs npm
              pip install awscli
  
        - run:
            name: build backend
            command: |
              cd backend
              npm i
              npm run build
              # npm install oauth-sign@^0.9.0
              #npm audit fix --audit-level=critical --force
              #npm audit fix
        - run:
            name: setting the environment
            working_directory: ./backend
            command: |
              pwd
              echo > ".env"
              echo ENVIRONMENT=production > .env
              echo TYPEORM_CONNECTION=postgres >> .env
              echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
              echo TYPEORM_HOST=$TYPEORM_HOST >> .env
              echo TYPEORM_PORT=$TYPEORM_PORT >> .env
              echo TYPEORM_USERNAME= $TYPEORM_USERNAME >> .env
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
        - run:
            name: build backend
            command: |      
              # Zip the directory
              tar -C backend -czvf artifact.tar.gz .
      #
        - run: 
            name: deploy backend
            command: |      
              cd .circleci/ansible
              echo "Contents  of the inventory.txt file is -------"
              cat inventory.txt
              ansible-playbook -i inventory.txt deploy-backend.yml  
            environment:
              ANSIBLE_HOST_KEY_CHECKING: false      
        - notify_slack_error
        - destroy-environment
        - revert-migrations
  smoke-test:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              # your code here
              sudo apt update
              sudo apt upgrade -y
              sudo apt install -y curl awscli
              

        - run:
            name: Backend smoke test.
            command: |
              export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "API_URL = ${API_URL}"
              if curl "${API_URL}/api/status" | grep "ok"
              then
                exit 0
              else
                exit 1
              fi
        - run:
            name: Frontend smoke test.
            command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"
              echo ${URL}
              if curl -s ${URL} | grep "Welcome"
              then
                exit 0
              else
                exit 1
              fi
        - notify_slack_error
        - destroy-environment
        - revert-migrations


  cloudfront-update:
    docker:
       - image: amazon/aws-cli  
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum -y install tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations      
      
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar
            yum -y install gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
 #         command: |
 #           # Old workflow ID
 #           export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value"  --no-paginate --output text)
 #           echo OldWorkflowID: "${OldWorkflowID}"
 #           echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
#

            # delete the stacks
    #        if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
     #       then
      #        aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
       #       aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
        #      aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
         #   fi
          command: |
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
                  
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            
            BackendStacks=($(aws cloudformation describe-stacks --no-paginate --query 'Stacks[?StackName!=`null`]|[?contains(StackName, `backend`) == `true`].StackName' --output text))
            echo Backend stacks: "${BackendStacks[@]}"
            for BackendStack in "${BackendStacks[@]}"
            do
              OldWorkflowID=${BackendStack: -7}
              echo OldWorkflowID: "${OldWorkflowID}"
              if [[ "${OldWorkflowID}" != "${CIRCLE_WORKFLOW_ID:0:7}" ]]
              then
      
                aws s3 rb --force s3://udapeople-${OldWorkflowID}
                aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
                aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
              fi
            done
           
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]


