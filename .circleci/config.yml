version: 2.1
orbs: 
  slack: circleci/slack@4.6.0
commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
           
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            #aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            #aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            #aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
     # Add parameter here      
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure  https://kvdb.io/LeGgihuBux3kmgp2KTPkSn/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
            # Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
              echo "revert migration done"
            fi
      
  
  notify_slack_error:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1     
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            #your code
            cd frontend
            npm install
            npm run build
            
      - notify_slack_error
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
         

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            #your code
            cd backend
            npm install
            npm run build
            
      - notify_slack_error
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
         

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [test-frontend]
      # Your job code here
      - run:
          name: run frontend test
          command: |
            #your code
            cd frontend
            npm install
            npm run test
      - notify_slack_error       
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [test-backend]      
      # Your job code here
      - run:
          name: run backend test
          command: |
            #your code
            cd backend
            npm install
            npm run test
      - notify_slack_error    
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [scan-frontend]         
      # Your job code here
      - run:
          name: run frontend scan
          command: |
            #your code
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
      - notify_slack_error
            
  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [scan-backend]         
      # Your job code here
      - run:
          name: run backend scan
          command: |
            #your code
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
      - notify_slack_error
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli     
    steps:
      - checkout
      # Checkout code from git
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist    
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> .circleci/ansible/inventory.txt
            #cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - backend/
      # Here's where you will add some code to rollback on failure      
      - destroy-environment
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["7e:93:0b:a2:44:d5:fe:c5:2a:84:e7:51:59:e4:d7:d6"]                          
      # attach workspace
#      - attach_workspace:
#          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk update
            apk upgrade
            apk add unzip 
            apk add curl
            /usr/local/bin/python -m pip install --upgrade pip                    
      - run:
          name: Install ansible
          command: |
            # your code here              
            apk add --update ansible 
            ansible --version
      - run:
          name: Install aws
          command: |
            # your code here                           
            pip install awscli --upgrade   
            aws --version       
      - run:
          name: Configure server
          command: |
            # Your code here 
            cd .circleci/ansible/ 
            ansible-playbook -i inventory.txt configure-server.yml  --key-file "~/udacity.pem"
          environment:
            ANSIBLE_HOST_KEY_CHECKING: false
       
  run-migrations: 
    docker:
      # Docker image here that supports NodeJS
      - image: python:3.7-alpine3.11
    steps:
      - checkout 
      # Checkout code from git
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install aws dependencies         
          command: |
            apk add --update ansible tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            pwd
            echo > ".env"
            echo ENVIRONMENT=production > .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME= $TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            ls -l
          
            npm install
            npm run build
            npm run migrations:revert
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
              curl --insecure https://kvdb.io/LeGgihuBux3kmgp2KTPkSn/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1' 
            else
              curl --insecure https://kvdb.io/LeGgihuBux3kmgp2KTPkSn/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0' 
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
  # Here's where you will add some code to rollback on failure      
      - destroy-environment
      
      
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:project,Values=udapeople" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            ls -la
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            ls -l
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            ls -l
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive     
      # Here's where you will add some code to rollback on failure      
      - destroy-environment
      - revert-migrations  
      

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - attach_workspace:
          at: ~/
      
      - add_ssh_keys:
          fingerprints: ["7e:93:0b:a2:44:d5:fe:c5:2a:84:e7:51:59:e4:d7:d6"]
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Build Backend
          command: |
            cd backend
            npm i
            npm run build
      - run:
          name: setting the environment
          working_directory: ./backend
          command: |
            pwd
            echo > ".env"
            echo ENVIRONMENT=production > .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME= $TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env

      - run:
          name: tar archive directory
          command: |
            ls -l
            tar -C backend -czvf artifact.tar.gz .
            ls -l
      - run:
          name: Deploy backend
          command: |
            echo "Contents  of the inventory.txt file is -------"
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations
  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:project,Values=udapeople" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo "${API_URL}"
            curl ${API_URL}
            # your code here
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi    
            
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"            
            echo ${URL}
            curl ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations
  cloudfront-update:
    docker:
       - image: amazon/aws-cli  
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum -y install tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations      
  cleanup:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
           

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]